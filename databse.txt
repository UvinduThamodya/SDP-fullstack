CREATE DATABASE IF NOT EXISTS restaurant_db;
USE restaurant_db;

-- Customers Table
CREATE TABLE Customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20) NOT NULL,
    address TEXT
);

-- Menu Items Table
CREATE TABLE MenuItems (
    item_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    availability BOOLEAN DEFAULT TRUE
);

-- Orders Table
CREATE TABLE Orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10,2) NOT NULL,
    status ENUM('Pending', 'Preparing', 'Completed', 'Cancelled') DEFAULT 'Pending',
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE CASCADE
);

-- Order Items Table (Many-to-Many Relationship)
CREATE TABLE OrderItems (
    order_item_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    item_id INT,
    quantity INT NOT NULL,
    subtotal DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (item_id) REFERENCES MenuItems(item_id) ON DELETE CASCADE
);

-- Employees Table
CREATE TABLE Employees (
    employee_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    role ENUM('Admin', 'Staff', 'Cashier', 'Chef') NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20) NOT NULL
);

-- Payments Table
CREATE TABLE Payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    amount DECIMAL(10,2) NOT NULL,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    method ENUM('Cash', 'Card', 'Online') NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id) ON DELETE CASCADE
);

-- Inventory Table
CREATE TABLE Inventory (
    inventory_id INT AUTO_INCREMENT PRIMARY KEY,
    item_name VARCHAR(100) NOT NULL,
    quantity INT NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    threshold INT NOT NULL
);

-- Menu Item Ingredients (Many-to-Many Relationship between Menu Items and Inventory)
CREATE TABLE MenuItemIngredients (
    menu_item_ingredient_id INT AUTO_INCREMENT PRIMARY KEY,
    item_id INT,
    inventory_id INT,
    quantity_required INT NOT NULL,
    FOREIGN KEY (item_id) REFERENCES MenuItems(item_id) ON DELETE CASCADE,
    FOREIGN KEY (inventory_id) REFERENCES Inventory(inventory_id) ON customersDELETE CASCADE
);

ALTER TABLE Customers 
ADD COLUMN password VARCHAR(255) NOT NULL;

CREATE TABLE contacts (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(100) NOT NULL,
  subject VARCHAR(200),
  message TEXT NOT NULL,
  created_at DATETIME NOT NULL
);

-- changes

ALTER TABLE MenuItems
ADD COLUMN category ENUM('Main-Dishes', 'Sea-Food', 'Desserts', 'Beverage') NOT NULL;

ALTER TABLE MenuItems
ADD COLUMN image_url VARCHAR(255);

ALTER TABLE Orders
ADD COLUMN delivery_address TEXT;

ALTER TABLE Orders MODIFY COLUMN status ENUM('Pending', 'Preparing', 'Completed', 'Cancelled', 'Paid') DEFAULT 'Pending';


ALTER TABLE Employees 
ADD COLUMN password VARCHAR(255) NOT NULL;

-- First remove the broken foreign key
ALTER TABLE MenuItemIngredients 
DROP FOREIGN KEY menu_item_ingredients_ibfk_2;

-- Add correct foreign key
ALTER TABLE MenuItemIngredients 
ADD CONSTRAINT fk_inventory
FOREIGN KEY (inventory_id) 
REFERENCES Inventory(inventory_id)
ON DELETE CASCADE;

ALTER TABLE Inventory
ADD COLUMN unit VARCHAR(20) NOT NULL DEFAULT 'grams';

INSERT INTO Inventory (item_name, quantity, unit, unit_price, threshold) VALUES
('Basmati Rice', 50000, 'grams', 2.50, 10000),
('Chicken Breast', 30000, 'grams', 5.75, 5000),
('Eggs', 200, 'pieces', 0.50, 50),
('Vegetable Mix', 15000, 'grams', 1.20, 3000),
('Pasta', 10000, 'grams', 3.00, 2000),
('Cheese', 5000, 'grams', 4.50, 1000),
('Sausages', 200, 'pieces', 2.00, 50);

-- Add any missing ingredients
INSERT INTO Inventory (item_name, quantity, unit, unit_price, threshold) VALUES
('Fish', 10000, 'grams', 1.20, 2000),
('Pasta', 15000, 'grams', 0.40, 3000),
('Oil', 5000, 'ml', 0.15, 1000),
('Urad Dal', 8000, 'grams', 0.30, 1500),
('Spices', 2000, 'grams', 0.80, 500);

INSERT INTO Inventory (item_name, quantity, unit, unit_price, threshold)
VALUES
('Fish', 10000, 'grams', 1.50, 2000),
('Pasta', 15000, 'grams', 0.60, 3000),
('Oil', 5000, 'ml', 0.20, 1000),
('Urad Dal', 8000, 'grams', 0.40, 1500),
('Spices', 3000, 'grams', 2.00, 500);

CREATE TABLE Cart (
    cart_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE CASCADE
);

CREATE TABLE CartItems (
    cart_item_id INT AUTO_INCREMENT PRIMARY KEY,
    cart_id INT NOT NULL,
    item_id INT NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (cart_id) REFERENCES Cart(cart_id) ON DELETE CASCADE,
    FOREIGN KEY (item_id) REFERENCES MenuItems(item_id) ON DELETE CASCADE
);


INSERT INTO MenuItems (name, description, price, category, image_url) VALUES
('Fried Rice', '#1 most liked', 570.00, 'Main-Dishes', 'url_to_fried_rice_image'),
('Egg Fried Rice', '', 390.00, 'Main-Dishes', 'url_to_egg_fried_rice_image'),
('Egg Kottu', 'Priced by add-ons', 500.00, 'Main-Dishes', 'url_to_egg_kottu_image'), -- You should insert correct price for this one
('Chicken Kottu', '', 520.00, 'Main-Dishes', 'url_to_chicken_kottu_image'),
('Hot & Spicy Egg Kottu', '', 650.00, 'Main-Dishes', 'url_to_hot_spicy_egg_kottu_image'),
('Hot & Spicy Chicken Kottu', '', 780.00, 'Main-Dishes', 'url_to_hot_spicy_chicken_kottu_image'),
('Rice And Curry Fish', '', 330.00, 'Main-Dishes', 'url_to_rice_curry_fish_image'),
('Rice And Curry Egg', '', 330.00, 'Main-Dishes', 'url_to_rice_curry_egg_image'),
('Rice And Curry Roast Chicken', '', 430.00, 'Main-Dishes', 'url_to_rice_curry_roast_chicken_image'),
('Egg Kottu', '', 520.00, 'Main-Dishes', 'url_to_string_hoppers_egg_kottu_image'),
('Chicken Kottu', '', 650.00, 'Main-Dishes', 'url_to_string_hoppers_chicken_kottu_image'),
('Roast Chicken Cheese Pasta', '', 975.00, 'Main-Dishes', 'url_to_roast_chicken_cheese_pasta_image'),
('Parata', '', 80.00, 'Main-Dishes', 'url_to_parata_image'),
('Uludu Wade', '', 80.00, 'Main-Dishes', 'url_to_uludu_wade_image'),
('Vegetable Rotti', '', 110.00, 'Main-Dishes', 'url_to_vegetable_rotti_image'),
('Chicken Rotti', '', 130.00, 'Main-Dishes', 'url_to_chicken_rotti_image'),
('Egg Rotti', '', 160.00, 'Main-Dishes', 'url_to_egg_rotti_image'),
('Chicken Curry', '', 325.00, 'Main-Dishes', 'url_to_chicken_curry_image'),
('Mini Fried Sausage (4 pieces)', '', 160.00, 'Main-Dishes', 'url_to_mini_fried_sausage_image'),
('Mini Deviled Sausage (4 pieces)', '', 160.00, 'Main-Dishes', 'url_to_mini_deviled_sausage_image');

INSERT INTO Employees (name, role, email, phone, password)
VALUES 
('John Doe', 'Staff', 'staff@example.com', '1234567890', '$2a$10$z9U4JZ0x7V1yFQ9JmZ3fGuN8uA7E5Xc9kHf8eW6zA6D6zQ0Y3w5eG');

SELECT item_name, COUNT(*) as count
FROM Inventory
GROUP BY item_name
HAVING COUNT(*) > 1;

CREATE TABLE temp_inventory AS
SELECT MIN(inventory_id) as inventory_id, item_name, 
       SUM(quantity) as quantity, unit, 
       AVG(unit_price) as unit_price, 
       MIN(threshold) as threshold
FROM Inventory
GROUP BY item_name, unit;

SET SQL_SAFE_UPDATES = 0;
DELETE FROM Inventory;
SET SQL_SAFE_UPDATES = 1; -- Re-enable when done

INSERT INTO Inventory (inventory_id, item_name, quantity, unit, unit_price, threshold)
SELECT * FROM temp_inventory;

SELECT * FROM Inventory ORDER BY inventory_id;

ALTER TABLE Inventory MODIFY COLUMN unit_price DECIMAL(10,4);
DROP TABLE temp_inventory;

ALTER TABLE Inventory ADD CONSTRAINT unique_item_name UNIQUE (item_name);

SELECT * FROM Inventory;

INSERT INTO Inventory (item_name, quantity, unit, unit_price, threshold)
VALUES 
('Chicken', 20000, 'grams', 0.80, 3000),
('Flour', 10000, 'grams', 0.10, 2000);

INSERT INTO MenuItemIngredients (item_id, inventory_id, quantity_required)
VALUES 
(21, (SELECT inventory_id FROM Inventory WHERE item_name = 'Rice'), 300), -- Rice: 300g
(21, (SELECT inventory_id FROM Inventory WHERE item_name = 'Vegetables'), 100), -- Vegetables: 100g
(21, (SELECT inventory_id FROM Inventory WHERE item_name = 'Eggs'), 2); -- Eggs: 2 pieces

INSERT INTO MenuItemIngredients (item_id, inventory_id, quantity_required)
VALUES 
(22, (SELECT inventory_id FROM Inventory WHERE item_name = 'Rice'), 250), -- Rice: 250g
(22, (SELECT inventory_id FROM Inventory WHERE item_name = 'Vegetables'), 80), -- Vegetables: 80g
(22, (SELECT inventory_id FROM Inventory WHERE item_name = 'Eggs'), 3); -- Eggs: 3 pieces

INSERT INTO Inventory (item_name, quantity, unit, unit_price, threshold)
VALUES 
('Rice', 50000, 'grams', 0.05, 5000),
('Vegetables', 15000, 'grams', 0.30, 2000);

ALTER TABLE MenuItemIngredients
ADD CONSTRAINT unique_menu_item_ingredient UNIQUE (item_id, inventory_id);

SELECT 
    m.name AS menu_item,
    i.item_name AS ingredient,
    mi.quantity_required
FROM MenuItemIngredients mi
JOIN MenuItems m ON mi.item_id = m.item_id
JOIN Inventory i ON mi.inventory_id = i.inventory_id
ORDER BY m.name, i.item_name;


INSERT INTO MenuItemIngredients (item_id, inventory_id, quantity_required)
VALUES 
(31, (SELECT inventory_id FROM Inventory WHERE item_name = 'Flour' LIMIT 1), 150), -- Flour: 150g
(31, (SELECT inventory_id FROM Inventory WHERE item_name = 'Chicken' LIMIT 1), 200), -- Chicken: 200g
(31, (SELECT inventory_id FROM Inventory WHERE item_name = 'Vegetables' LIMIT 1), 120), -- Vegetables: 120g
(31, (SELECT inventory_id FROM Inventory WHERE item_name = 'Spices' LIMIT 1), 15); -- Spices: 15g

select * from menuitems;

INSERT INTO MenuItemIngredients (item_id, inventory_id, quantity_required)
VALUES 
(32, (SELECT inventory_id FROM Inventory WHERE item_name = 'Pasta' LIMIT 1), 300), -- Pasta: 300g
(32, (SELECT inventory_id FROM Inventory WHERE item_name = 'Chicken' LIMIT 1), 250), -- Chicken: 250g
(32, (SELECT inventory_id FROM Inventory WHERE item_name = 'Cheese' LIMIT 1), 120), -- Cheese: 120g
(32, (SELECT inventory_id FROM Inventory WHERE item_name = 'Vegetables' LIMIT 1), 80); -- Vegetables: 80g

INSERT INTO MenuItemIngredients (item_id, inventory_id, quantity_required)
VALUES 
(33, (SELECT inventory_id FROM Inventory WHERE item_name = 'Flour' LIMIT 1), 150), -- Flour: 150g
(33, (SELECT inventory_id FROM Inventory WHERE item_name = 'Oil' LIMIT 1), 30); -- Oil: 30ml

INSERT INTO MenuItemIngredients (item_id, inventory_id, quantity_required)
VALUES 
(34, (SELECT inventory_id FROM Inventory WHERE item_name = 'Urad Dal' LIMIT 1), 120), -- Urad Dal: 120g
(34, (SELECT inventory_id FROM Inventory WHERE item_name = 'Oil' LIMIT 1), 50), -- Oil: 50ml
(34, (SELECT inventory_id FROM Inventory WHERE item_name = 'Spices' LIMIT 1), 10); -- Spices: 10g

INSERT INTO MenuItemIngredients (item_id, inventory_id, quantity_required)
VALUES 
(35, (SELECT inventory_id FROM Inventory WHERE item_name = 'Flour' LIMIT 1), 120), -- Flour: 120g
(35, (SELECT inventory_id FROM Inventory WHERE item_name = 'Vegetables' LIMIT 1), 100), -- Vegetables: 100g
(35, (SELECT inventory_id FROM Inventory WHERE item_name = 'Spices' LIMIT 1),10);

INSERT INTO MenuItemIngredients (item_id, inventory_id, quantity_required)
VALUES 
(36, (SELECT inventory_id FROM Inventory WHERE item_name = 'Flour' LIMIT 1), 120), -- Flour: 120g
(36, (SELECT inventory_id FROM Inventory WHERE item_name = 'Chicken' LIMIT 1), 100), -- Chicken: 100g
(36, (SELECT inventory_id FROM Inventory WHERE item_name = 'Spices' LIMIT 1), 10); -- Spices: 10g

INSERT INTO MenuItemIngredients (item_id, inventory_id, quantity_required)
VALUES 
(37, (SELECT inventory_id FROM Inventory WHERE item_name = 'Flour' LIMIT 1), 120), -- Flour: 120g
(37, (SELECT inventory_id FROM Inventory WHERE item_name = 'Eggs' LIMIT 1), 2), -- Eggs: 2 pieces
(37, (SELECT inventory_id FROM Inventory WHERE item_name = 'Spices' LIMIT 1), 10); -- Spices: 10g

INSERT INTO MenuItemIngredients (item_id, inventory_id, quantity_required)
VALUES 
(40, (SELECT inventory_id FROM Inventory WHERE item_name = 'Sausages' LIMIT 1), 4), -- Sausages: 4 pieces
(40, (SELECT inventory_id FROM Inventory WHERE item_name = 'Spices' LIMIT 1), 15), -- Spices: 15g
(40, (SELECT inventory_id FROM Inventory WHERE item_name = 'Oil' LIMIT 1), 20); -- Oil: 20ml

-- Trigger for Inventory Deduction:

DELIMITER //
CREATE TRIGGER deduct_ingredients AFTER INSERT ON OrderItems
FOR EACH ROW
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE ingredient_id INT;
    DECLARE qty_needed DECIMAL(10,2);

    DECLARE cur CURSOR FOR 
        SELECT inventory_id, quantity_required 
        FROM MenuItemIngredients 
        WHERE item_id = NEW.item_id;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO ingredient_id, qty_needed;
        IF done THEN LEAVE read_loop; END IF;

        -- Update inventory (multiply by order quantity)
        UPDATE Inventory 
        SET quantity = quantity - (qty_needed * NEW.quantity)
        WHERE inventory_id = ingredient_id;
    END LOOP;

    CLOSE cur;
END //
DELIMITER ;

-- test 
INSERT INTO Orders (customer_id, total_amount, status) 
VALUES (1, 500, 'Pending');
select * from orders;

INSERT INTO OrderItems (order_id, item_id, quantity, subtotal) 
VALUES (1, 36, 2, 240); -- Chicken Rotti (ID: 36), Quantity: 2

SELECT * FROM Inventory WHERE item_name IN ('Flour', 'Chicken', 'Spices');

SELECT * FROM Inventory WHERE quantity < threshold;

